<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1425318235835">{:repl-history {:ide [], :local [&quot;(defn market-data []\n  (let [out (async/chan 1024)\n        context (ZMQ/context 1)\n        subscriber (.socket context ZMQ/SUB)]\n    (.connect subscriber \&quot;tcp://relay-us-central-1.eve-emdr.com:8050\&quot;)\n    (.subscribe subscriber (byte-array 0))\n    (async/thread\n     (try\n       (loop []\n         (let [data (.recv subscriber)]\n           (when true\n             (do\n               (async/&gt;!! out data)\n               (recur)))))\n       (catch Throwable ex\n         (println \&quot;Error occured: \&quot; ex)))\n     (async/close! out)\n     (println \&quot;Shutting down\&quot;)\n     (.term context))\n    out))&quot; &quot;(ns zeromq-example.core\n  (:require [clojure.core.async :as async]\n            [cheshire.core :as cheshire])\n  (:import (org.zeromq ZContext ZMQ))\n  (:import (java.util.zip Inflater)))\n\n(defn market-data []\n  (let [out (async/chan 1024)\n        context (ZMQ/context 1)\n        subscriber (.socket context ZMQ/SUB)]\n    (.connect subscriber \&quot;tcp://relay-us-central-1.eve-emdr.com:8050\&quot;)\n    (.subscribe subscriber (byte-array 0))\n    (async/thread\n     (try\n       (loop []\n         (let [data (.recv subscriber)]\n           (when true\n             (do\n               (async/&gt;!! out data)\n               (recur)))))\n       (catch Throwable ex\n         (println \&quot;Error occured: \&quot; ex)))\n     (async/close! out)\n     (println \&quot;Shutting down\&quot;)\n     (.term context))\n    out))\n\n(defn inflater [data]\n  (let [inflater (Inflater.)\n        decompressed (byte-array (* (alength data) 16))\n        _ (.setInput inflater data)\n        decompressed-size (.inflate inflater decompressed)\n        output (byte-array decompressed-size)]\n    (System/arraycopy decompressed 0 output 0 decompressed-size)\n    (String. output \&quot;UTF-8\&quot;)))\n\n\n;(let [c (market-data)]\n;  (loop []\n;    (println (:rows (first (:rowsets (cheshire/parse-string (inflater (async/&lt;!! c)) true)))))\n;    (recur))\n;  (async/close! c))\n\n&quot;], :remote []}}</component>
</project>